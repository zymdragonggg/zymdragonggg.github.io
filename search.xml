<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>给Ubuntu服务器配置tensorflow2.0</title>
    <url>/2020/03/07/aliyunsetting/</url>
    <content><![CDATA[<p>本文主要介绍如何在各种服务器上配置tensorflow机器学习框架。</p>
<a id="more"></a>

<h1 id="安装conda"><a href="#安装conda" class="headerlink" title="安装conda"></a>安装conda</h1><p>业余的我只知道<a href="https://www.anaconda.com/" target="_blank" rel="noopener">Conda</a>是一个很好的用来管理环境的工具，好了上专业点的解释：</p>
<p><em>conda类似于npm或maven的包管理工具，只是conda是针对于python的。可以安装minconda或anaconda进行安装，前者是简化版本，只包含conda和其依赖。如果安装环境有python相关包也没有关系，不需要进行卸载。anaconda支持windows、mac和linux系统，且有两个类型的版本，分别是GUI和command line版本，前者是图形界面，后者是命令行界面，占用资源较少。</em></p>
<p>那么我们在服务器上配置的时候其实用<strong>minconda</strong>就好了，废话不多少，开始上第一步。</p>
<p>在需要配置的服务器，依次输入下列命令</p>
<ul>
<li>下载miniconda</li>
</ul>
<p><code>wget https://repo.continuum.io/miniconda/Miniconda3-4.6.14-Linux-x86_64.sh</code></p>
<ul>
<li>安装miniconda</li>
</ul>
<p><code>sh Miniconda3-4.6.14-Linux-x86_64.sh</code></p>
<p>一路yes和 回车。</p>
<p>回到根目录</p>
<p><code>source ~/.bashrc</code></p>
<ul>
<li>更新conda</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br><span class="line">conda update --all</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<p>至此conda安装完毕，接下来进入虚拟环境管理</p>
<h1 id="用Conda配置虚拟环境"><a href="#用Conda配置虚拟环境" class="headerlink" title="用Conda配置虚拟环境"></a>用Conda配置虚拟环境</h1><ul>
<li>创建 名字为your-name的，python版本为3.6的虚拟环境</li>
</ul>
<p><code>conda create -n your-name python = 3.6 #这里可以自己根据自己需求选择</code></p>
<ul>
<li>打开虚拟环境</li>
</ul>
<p><code>conda activate your-name</code> </p>
<ul>
<li>关闭虚拟环境</li>
</ul>
<p><code>conda deactivate</code> </p>
<ul>
<li>安装需要用到的package</li>
</ul>
<p><code>conda install package-name</code></p>
<p>基于本文需求，我们这里安装tensorflow2.0这个package</p>
<p><code>conda install tensorflow</code></p>
<p>也可以指定tf的版本，不过默认的话目前会下载tf2.0。</p>
<p>至于gpu版本的tensorflow因为我用不到，所以我没研究。。。。。。。。。。。。好，避免尴尬，下一步吧^-^</p>
<h1 id="测试tf是否安装成功"><a href="#测试tf是否安装成功" class="headerlink" title="测试tf是否安装成功"></a>测试tf是否安装成功</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;<span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">&gt;&gt;print(tf.\_\_version\_\_)  <span class="comment">#注意这里两个总共四个下划线</span></span><br><span class="line"><span class="number">2.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<p>Ok 啦，今天的小教程结束了！！！</p>
<p>其实这是我给自己用的要不然每次查太累了。加油！go go go!</p>
]]></content>
      <categories>
        <category>基础应用</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>Tensorflow2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>在Mac上用Hexo快速搭建Github个人博客</title>
    <url>/2020/03/03/hexo_github/</url>
    <content><![CDATA[<p>本文主要是介绍在Mac上利用Hexo以及Github pages快速搭建一个个人博客。整体流程非常简单，按步骤来就可以。</p>
<a id="more"></a>

<p>搭建前提：拥有一个Github账号 + 有耐心。。。</p>
<h1 id="知识简介"><a href="#知识简介" class="headerlink" title="知识简介"></a>知识简介</h1><ul>
<li><strong>Hexo</strong></li>
</ul>
<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<ul>
<li><strong>GitHub pages</strong></li>
</ul>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>
<h1 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h1><p>因为Hexo是基于Node.js的，环境搭建过程中还需要使用npm和git，因此需要先安装Node.js和Git。</p>
<ul>
<li><p>下载<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></p>
</li>
<li><p>下载 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></p>
</li>
</ul>
<p>下载并安装，按默认配置完成安装ok。</p>
<p>安装完成后，打开终端terminal，输入下列命令，并对应输出结果说明安装成功。</p>
<p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcjgf5bd06j307a02jdfw.jpg" alt="test1"> </p>
<h1 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h1><p>拿出你的Github账号。比如就叫账号就是：  <em>邮箱</em> </p>
<p>接下来<strong>创建SSH密匙</strong>。输入下列命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后一路回车。OK</p>
<ul>
<li><strong>添加密匙</strong>：</li>
</ul>
<p>进入 <em>/Users/用户名/.ssh</em> 目录，找到id_rsa.pub文件并复制里面的内容，登陆Github，进入到settings界面，选择左边栏的SSH and GPG keys,点击 New SSH key。 title名字可以随意取，复制的id_rsa.pub内容现在粘贴在key中，点击Add SSH key添加完成。</p>
<ul>
<li><strong>验证连接</strong>：</li>
</ul>
<p>在终端输入  ssh -T <a href="mailto:git@github.com">git@github.com</a> ， 问你‘are you sure’， 然后 输入 yes回车</p>
<p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcjgfd01rbj30ek03t0tk.jpg" alt="ssh"></p>
<p>上图表示已经连接成功了！OK</p>
<h1 id="创建Github-Pages仓库"><a href="#创建Github-Pages仓库" class="headerlink" title="创建Github Pages仓库"></a>创建Github Pages仓库</h1><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li><p>Repository name 中输入 <code>用户名.github.io</code> (<em>注意这里必须和你用户名保持一致</em>)</p>
</li>
<li><p>Description选填</p>
</li>
<li><p>设定为Public</p>
</li>
<li><p>勾选 “Initialize this repository with a README”</p>
</li>
</ul>
<p>填好后点击 Create repository 创建。创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h1 id="本地安装-Hexo-博客程序"><a href="#本地安装-Hexo-博客程序" class="headerlink" title="本地安装 Hexo 博客程序"></a>本地安装 Hexo 博客程序</h1><p>接下来开始使用npm 安装Hexo 博客程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>注意需要获取管理员权限，由此需要输入开机密码。</p>
<p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcjgfi62eyj30e6020mxj.jpg" alt="installhexo"></p>
<p>出现上图所示那就说明安装成功了。</p>
<p>新建一个文件夹用来存放 Hexo 的程序文件，如 Blog。</p>
<p>终端切换到Blog的路径：cd /Users/m/Documents/Blog这是我存放Blog的路径。</p>
<p>接下来依次输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure>

<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>

<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong>OK</p>
<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>
<p>输入命令 ls 查看你的blod文件目录：</p>
<p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcjgfmiv0cj30dw01tgls.jpg" alt="ls"></p>
<p>其中config是网站的配置信息，package是应用程序的信息，scaffolds是模板文件夹，source是存放用户资源的（Markdown文档）themes是主题文件夹，public是网站文件。</p>
<h1 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h1><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h1 id="发布博文"><a href="#发布博文" class="headerlink" title="发布博文"></a>发布博文</h1><p>进入Blog所在目录，创建博文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;</span><br></pre></td></tr></table></figure>

<p>然后 source 文件夹中会出现一个 name.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>
<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>

<p>也可以一句话直接生成并部署如下句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d             # 生成页面并部署</span><br></pre></td></tr></table></figure>

<p>其他命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo s --debug        # 本地预览调试</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>

<h1 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h1><p>我们博客的主题文件夹都放在根目录下的themes中，我们可以看到默认的主题是landscape。我猜大多数人是不喜欢的，那么可以选择其他的主题在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo的主题网站</a>上，不过建议新手的我们乖乖用最热门的主题NexT吧，而且这个主题相当简洁优雅有档(Bi)次(Ge)。</p>
<p>直接在终端 cd 到博客根目录，然后输入下列命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p><em>note：我在本地下载的时候很慢，于是我用了阿里云服务器进行的下载，下载之后用Filezilla又下载到了本地，然后将next主题放到themes文件夹下，如果网速好，可以科学上网的请忽略本条注释。</em></p>
<p>完成下载后在站点目录中搜索关键字 theme。修改其内容如下</p>
<p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gckl8qnnhrj30bq02twet.jpg" alt="image-20200306224250629"></p>
<p>保存，发布并预览   hexo g -d. !</p>
<p>快去看看是不是现在变好看了好多？</p>
<h1 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h1><p>剩下的进行更细节的网站设计，大家去查询吧！</p>
<p>推荐一个我主要参考的<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">主题优化</a>的网站。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后的最后要有一个conclusion 和 future work。</p>
<p>博客是我辛辛苦苦搭建了近两天，特别感谢我的大树哥铺好的路，让我少走不少弯路，我在自己的菜单页推荐了我可爱的大树哥，大家可以向他好好学习（不知道为什么越写越像致谢）。</p>
<p>不过还好多出问题没有解决，但是整个博客做好以后真的是开心的不得了呀！以后要努力写博客！加油！o^_^o</p>
<p><strong>博客有问题或者我哪里写的不对请大家可以用旁边的信息私聊我呀～</strong></p>
]]></content>
      <categories>
        <category>基础应用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
</search>
